/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.blackhorse.kronos.frames;

import com.blackhorse.kronos.Functions;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.text.PDFTextStripper;
import org.apache.poi.xwpf.usermodel.XWPFDocument;
import org.apache.poi.xwpf.usermodel.XWPFParagraph;

/**
 *
 * @author whitesnake
 */
public class WordFrame extends javax.swing.JFrame {

    private final List<File> pdfFiles;
    DefaultListModel<String> model = new DefaultListModel<>();
    Functions fun = new Functions();
    private static WordFrame instancia;
    /**
     * Creates new form WordFrame
     */
    public WordFrame() {
        this.pdfFiles = new ArrayList<>();
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        uploadWordButton = new javax.swing.JButton();
        convertWordButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        fileListWord = new javax.swing.JList<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("PDF a Word");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        uploadWordButton.setBackground(javax.swing.UIManager.getDefaults().getColor("Actions.Blue"));
        uploadWordButton.setText("Cargar archivo");
        uploadWordButton.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        uploadWordButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        uploadWordButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uploadWordButtonActionPerformed(evt);
            }
        });

        convertWordButton.setBackground(javax.swing.UIManager.getDefaults().getColor("Actions.Green"));
        convertWordButton.setText("Convertir a Word");
        convertWordButton.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        convertWordButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        convertWordButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                convertWordButtonActionPerformed(evt);
            }
        });

        jScrollPane1.setViewportView(fileListWord);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(uploadWordButton, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(convertWordButton, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(uploadWordButton, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(convertWordButton, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void uploadWordButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uploadWordButtonActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setMultiSelectionEnabled(true);
        int result = fileChooser.showOpenDialog(null);
        if (result == JFileChooser.APPROVE_OPTION) {
            File[] selectedFiles = fileChooser.getSelectedFiles();
            for (File file : selectedFiles) {
                if (file.getName().endsWith(".pdf")) {
                    pdfFiles.add(file);
                    fileListWord.setModel(model);
                    model.addElement(file.toString());
                }else{
                    JOptionPane.showMessageDialog(null, "Formato de archivo incorrecto!");
                }
            }
        }
    }//GEN-LAST:event_uploadWordButtonActionPerformed

    private void convertWordButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_convertWordButtonActionPerformed
        if (!pdfFiles.isEmpty()) {
            
            for (File pdf : pdfFiles) {
                
                
                try (PDDocument pdfDocument = PDDocument.load(new File(pdf.getAbsolutePath()));
                    XWPFDocument wordDocument = new XWPFDocument()) {

                   PDFTextStripper pdfStripper = new PDFTextStripper();
                    String pdfText = pdfStripper.getText(pdfDocument);

                   XWPFParagraph paragraph = wordDocument.createParagraph();
                   paragraph.createRun().setText(pdfText);

                   try (FileOutputStream out = new FileOutputStream("Kronos word "+fun.getDate()+".docx")) {
                       wordDocument.write(out);
                   }

                   JOptionPane.showMessageDialog(null, "Archivos PDF combinados exitosamente!");

               } catch (IOException e) {
               }
                
                
                /*
                // Cargar el archivo PDF
                Document pdfDocument = new Document(pdf.getAbsolutePath());

                // Guardar el archivo PDF como Word
                pdfDocument.save("Kronos word "+fun.getDate()+".docx", SaveFormat.DocX);
                
                JOptionPane.showMessageDialog(null, "Archivos PDF combinados exitosamente!");
                */
            }
        } else {
            JOptionPane.showMessageDialog(null, "No se han cargado archivos PDF.");
        }
    }//GEN-LAST:event_convertWordButtonActionPerformed

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        instancia = null;
        dispose();
    }//GEN-LAST:event_formWindowClosed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(WordFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(WordFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(WordFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(WordFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new WordFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton convertWordButton;
    private javax.swing.JList<String> fileListWord;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton uploadWordButton;
    // End of variables declaration//GEN-END:variables

    public static WordFrame getInstancia(){
        if (instancia == null){
            instancia = new WordFrame();
            instancia.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
            instancia.setVisible(true);
            
        }
        return instancia;
    }

}
